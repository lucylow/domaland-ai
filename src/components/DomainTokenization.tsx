// React component for domain tokenization interface

import React, { useState } from 'react';
import { useDomainOperations } from '../hooks/useDomainOperations';
import { TokenizationParams } from '../types/domain';

interface DomainTokenizationProps {
  onSuccess?: (domainAsset: any) => void;
  onCancel?: () => void;
}

export const DomainTokenization: React.FC<DomainTokenizationProps> = ({
  onSuccess,
  onCancel
}) => {
  const { tokenizeDomain, loading, error, clearError } = useDomainOperations();
  
  const [formData, setFormData] = useState({
    domainName: '',
    description: '',
    category: 'technology',
    keywords: '',
    royaltyPercentage: 5
  });

  const [validation, setValidation] = useState({
    domainName: '',
    royaltyPercentage: ''
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Clear validation error when user starts typing
    if (validation[name as keyof typeof validation]) {
      setValidation(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = (): boolean => {
    const newValidation = {
      domainName: '',
      royaltyPercentage: ''
    };

    let isValid = true;

    // Validate domain name
    if (!formData.domainName) {
      newValidation.domainName = 'Domain name is required';
      isValid = false;
    } else if (!/^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.[a-zA-Z]{2,}$/.test(formData.domainName)) {
      newValidation.domainName = 'Please enter a valid domain name (e.g., example.com)';
      isValid = false;
    }

    // Validate royalty percentage
    const royalty = parseFloat(formData.royaltyPercentage.toString());
    if (isNaN(royalty) || royalty < 0 || royalty > 100) {
      newValidation.royaltyPercentage = 'Royalty percentage must be between 0 and 100';
      isValid = false;
    }

    setValidation(newValidation);
    return isValid;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    clearError();

    const tokenizationParams: TokenizationParams = {
      domainName: formData.domainName,
      valuation: {
        estimatedValue: 0, // Will be generated by AI
        confidence: 0,
        factors: [],
        lastUpdated: Date.now(),
        aiModel: 'domaland-ai-v1.0'
      },
      metadata: {
        description: formData.description,
        category: formData.category,
        keywords: formData.keywords.split(',').map(k => k.trim()).filter(k => k),
        traffic: {
          monthlyVisitors: 0,
          bounceRate: 0,
          avgSessionDuration: 0,
          topCountries: [],
          topReferrers: []
        }
      },
      royaltyPercentage: parseFloat(formData.royaltyPercentage.toString())
    };

    const result = await tokenizeDomain(tokenizationParams);
    
    if (result) {
      onSuccess?.(result);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Tokenize Your Domain
        </h2>
        <p className="text-gray-600">
          Convert your domain into a tradeable NFT and unlock liquidity. 
          Our AI will automatically generate a valuation and create a marketplace listing.
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Domain Name */}
        <div>
          <label htmlFor="domainName" className="block text-sm font-medium text-gray-700 mb-2">
            Domain Name *
          </label>
          <input
            type="text"
            id="domainName"
            name="domainName"
            value={formData.domainName}
            onChange={handleInputChange}
            placeholder="e.g., web3hub.com"
            className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              validation.domainName ? 'border-red-500' : 'border-gray-300'
            }`}
          />
          {validation.domainName && (
            <p className="mt-1 text-sm text-red-600">{validation.domainName}</p>
          )}
        </div>

        {/* Category */}
        <div>
          <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-2">
            Category
          </label>
          <select
            id="category"
            name="category"
            value={formData.category}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="technology">Technology</option>
            <option value="finance">Finance</option>
            <option value="healthcare">Healthcare</option>
            <option value="education">Education</option>
            <option value="entertainment">Entertainment</option>
            <option value="ecommerce">E-commerce</option>
            <option value="other">Other</option>
          </select>
        </div>

        {/* Description */}
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
            Description
          </label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            rows={3}
            placeholder="Describe your domain and its potential uses..."
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {/* Keywords */}
        <div>
          <label htmlFor="keywords" className="block text-sm font-medium text-gray-700 mb-2">
            Keywords
          </label>
          <input
            type="text"
            id="keywords"
            name="keywords"
            value={formData.keywords}
            onChange={handleInputChange}
            placeholder="web3, blockchain, crypto (comma-separated)"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {/* Royalty Percentage */}
        <div>
          <label htmlFor="royaltyPercentage" className="block text-sm font-medium text-gray-700 mb-2">
            Royalty Percentage *
          </label>
          <div className="relative">
            <input
              type="number"
              id="royaltyPercentage"
              name="royaltyPercentage"
              value={formData.royaltyPercentage}
              onChange={handleInputChange}
              min="0"
              max="100"
              step="0.1"
              className={`w-full px-3 py-2 pr-8 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                validation.royaltyPercentage ? 'border-red-500' : 'border-gray-300'
              }`}
            />
            <span className="absolute right-3 top-2 text-gray-500">%</span>
          </div>
          {validation.royaltyPercentage && (
            <p className="mt-1 text-sm text-red-600">{validation.royaltyPercentage}</p>
          )}
          <p className="mt-1 text-sm text-gray-500">
            Percentage of future sales that will be paid as royalties (0-100%)
          </p>
        </div>

        {/* Error Display */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <p className="text-sm text-red-600">{error}</p>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-6 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Tokenizing...' : 'Tokenize Domain'}
          </button>
        </div>
      </form>

      {/* Information Panel */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-md p-4">
        <h3 className="text-sm font-medium text-blue-800 mb-2">What happens when you tokenize?</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>• AI-powered valuation will be generated automatically</li>
          <li>• Your domain becomes a tradeable NFT</li>
          <li>• A marketplace listing is created with 24/7 availability</li>
          <li>• Automated landing page is generated for sales</li>
          <li>• You retain full ownership until sold</li>
        </ul>
      </div>
    </div>
  );
};